{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timeStamp } from \"../firebase/config\";\n\nconst useStorage = file => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    // references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n    storageRef.put(file).on('state_changed', snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      collectionRef.add({\n        url,\n        createdAt: timeStamp()\n      });\n      setUrl(url);\n    });\n  }, [file]);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n\nexport default useStorage;","map":{"version":3,"sources":["/Users/lakshyaagrawal/Downloads/React/photoMart/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","timeStamp","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","add","createdAt"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAA0BC,gBAA1B,EAA6CC,SAA7C,QAA6D,oBAA7D;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMY,UAAU,GAAGX,cAAc,CAACY,GAAf,CAAmBR,IAAI,CAACS,IAAxB,CAAnB;AACA,UAAMC,aAAa,GAAGb,gBAAgB,CAACc,UAAjB,CAA4B,QAA5B,CAAtB;AAEAJ,IAAAA,UAAU,CAACK,GAAX,CAAeZ,IAAf,EAAqBa,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAU;AAC/C,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA2C,GAA5D;AACAf,MAAAA,WAAW,CAACa,UAAD,CAAX;AACH,KAHD,EAGIG,GAAD,IAAS;AACRd,MAAAA,QAAQ,CAACc,GAAD,CAAR;AACH,KALD,EAKG,YAAY;AACX,YAAMb,GAAG,GAAG,MAAME,UAAU,CAACY,cAAX,EAAlB;AACAT,MAAAA,aAAa,CAACU,GAAd,CAAkB;AAACf,QAAAA,GAAD;AAAMgB,QAAAA,SAAS,EAAEvB,SAAS;AAA1B,OAAlB;AACAQ,MAAAA,MAAM,CAACD,GAAD,CAAN;AACH,KATD;AAUH,GAfU,EAeR,CAACL,IAAD,CAfQ,CAAT;AAiBF,SAAM;AAACC,IAAAA,QAAD;AAAYI,IAAAA,GAAZ;AAAiBF,IAAAA;AAAjB,GAAN;AAEC,CAxBD;;AA0BA,eAAeJ,UAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectStorage , projectFirestore , timeStamp} from \"../firebase/config\";\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    // references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n\n    storageRef.put(file).on('state_changed' ,(snap) => {\n        let percentage = (snap.bytesTransferred / snap.totalBytes) *100;\n        setProgress(percentage);\n    }, (err) => {\n        setError(err);\n    }, async () => {\n        const url = await storageRef.getDownloadURL();\n        collectionRef.add({url, createdAt: timeStamp()})\n        setUrl(url)\n    })\n}, [file]);\n\nreturn{progress , url, error};\n\n};\n\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}